/**
 * Set up Checkstyle, Findbugs and PMD to perform extensive code analysis.
 *
 * Gradle tasks added:
 * - checkstyle
 * - findbugs
 * - pmd
 *
 * The three tasks above are added as dependencies of the check task so running check will
 * run all of them.*/

apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
check.dependsOn 'checkstyle', 'findbugs', 'pmd'

def configDir = "$project.rootDir/config/quality";
def reportsDir = "$project.buildDir/reports"

checkstyle {
  toolVersion = '7.2'
}

task checkstyle(type: Checkstyle,
    group: 'Verification',
    description: 'Runs code style checks') {

  configFile file("$configDir/checkstyle/checkstyle.xml")
  source 'src'
  include '**/*.java'
  exclude '**/gen/**'
  classpath = files()
}

task findbugs(type: FindBugs,
    group: 'Verification',
    description: 'Inspect java bytecode for bugs',
    dependsOn: ['assembleDebug', 'compileDebugSources', 'compileReleaseSources']) {

  ignoreFailures = false
  effort = "max"
  reportLevel = "high"
  excludeFilter = new File("$configDir/findbugs/findbugs-filter.xml")
  classes = files("$project.rootDir/app/build/intermediates/classes")

  source 'src'
  include '**/*.java'
  exclude '**/gen/**'

  reports {
    xml.enabled = false
    html.enabled = true
    xml {
      destination "$reportsDir/findbugs/findbugs.xml"
    }
    html {
      destination "$reportsDir/findbugs/findbugs.html"
    }
  }

  classpath = files()
}


task pmd(type: Pmd,
    group: 'Verification',
    description: 'Inspect sourcecode for bugs') {

  ignoreFailures = true
  ruleSetFiles = files("$configDir/pmd/pmd-ruleset.xml")
  ruleSets = []

  source 'src'
  include '**/*.java'
  exclude '**/gen/**'

  reports {
    xml.enabled = false
    html.enabled = true
    xml {
      destination "$reportsDir/pmd/pmd.xml"
    }
    html {
      destination "$reportsDir/pmd/pmd.html"
    }
  }
}